logging {
  level  = "info"
  format = "logfmt"
}

livedebugging {
  enabled = true
}

// OpenTelemetry endpoint configuration.

otelcol.receiver.otlp "default" {
  http {}
  grpc {}

  output {
    logs    = [otelcol.processor.batch.default.input]
    metrics = [otelcol.processor.batch.default.input]
    traces  = [otelcol.processor.batch.default.input]
  }
}

otelcol.processor.batch "default" {
  output {
    logs    = [otelcol.exporter.otlphttp.loki.input]
    metrics = [otelcol.exporter.prometheus.default.input]
    traces  = [otelcol.exporter.otlphttp.tempo.input]
  }
}

otelcol.exporter.otlphttp "loki" {
  client {
    endpoint = "http://grafana-loki:3100/otlp"
  }
}

otelcol.exporter.otlphttp "tempo" {
  client {
    endpoint = "http://grafana-tempo:4318"
  }
}

otelcol.exporter.prometheus "default" {
  forward_to = [prometheus.remote_write.default.receiver]
}

prometheus.remote_write "default" {
  endpoint {
    url = "http://grafana-mimir:8080/api/v1/push"
  }
}

// Push logs from files to Loki.

local.file_match "logs" {
  path_targets = [
    {__path__ = "/var/log/nginx/*.log", "service_name" = "nginx"},
    {__path__ = "/var/log/apache2/*.log", "service_name" = "apache"},
    {__path__ = "/var/log/syslog", "service_name" = "syslog"},
  ]
}

loki.source.file "logs" {
  targets    = local.file_match.logs.targets
  forward_to = [loki.write.local.receiver]
}

loki.write "local" {
  endpoint {
    url = "http://grafana-loki:3100/loki/api/v1/push"
  }
}
